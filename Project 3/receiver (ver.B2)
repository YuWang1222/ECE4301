use anyhow::Result;
use base64::{engine::general_purpose, Engine as _};
use byteorder::{BigEndian, ReadBytesExt};
use openssl::symm::{Cipher, Crypter, Mode};
use opencv::{core, highgui, imgproc, prelude::*};
use std::fs::File;
use std::io::Read;
use std::net::TcpStream;

const BLOCK_SIZE: usize = 16;
const WIDTH: i32 = 640;
const HEIGHT: i32 = 480;
const FRAME_SIZE: usize = (WIDTH * HEIGHT * 3 / 2) as usize; // YUV420 size

fn decrypt_frame(encrypted_data: &[u8], key: &[u8]) -> Result<Vec<u8>> {
    let iv = &encrypted_data[..BLOCK_SIZE];
    let cipher = Cipher::aes_128_cbc();
    let mut crypter = Crypter::new(cipher, Mode::Decrypt, key, Some(iv))?;

    let mut decrypted = vec![0u8; encrypted_data.len()];
    let count = crypter.update(&encrypted_data[BLOCK_SIZE..], &mut decrypted)?;
    let rest = crypter.finalize(&mut decrypted[count..])?;
    decrypted.truncate(count + rest);

    // Remove PKCS7 padding
    let padding_len = *decrypted.last().unwrap_or(&0) as usize;
    if padding_len > 0 && padding_len <= BLOCK_SIZE {
        decrypted.truncate(decrypted.len() - padding_len);
    }

    Ok(decrypted)
}

fn main() -> Result<()> {
    let mut key_file = File::open("/home/marwah555/aes_key.bin")?;
    let mut key = vec![0u8; BLOCK_SIZE];
    key_file.read_exact(&mut key)?;

    let sender_ip = "172.20.10.2"; // Update if needed
    let mut stream = TcpStream::connect((sender_ip, 12364))?;
    println!("[Pi #2] Connected to sender at {}:12364", sender_ip);

    loop {
        let frame_length = stream.read_u32::<BigEndian>()? as usize;
        println!("[Pi #2] Receiving frame of length: {}", frame_length);

        let mut encrypted_frame = vec![0u8; frame_length];
        stream.read_exact(&mut encrypted_frame)?;

        let decrypted = decrypt_frame(&encrypted_frame, &key)?;
        println!("[Pi #2] Decrypted frame length: {}", decrypted.len());

        // Convert YUV420 to BGR for OpenCV
        let yuv = Mat::from_slice(&decrypted)?
            .reshape(1, (HEIGHT * 3 / 2) as i32)?; // Single-channel, height 1.5x

        let mut bgr = Mat::default();
        imgproc::cvt_color(&yuv, &mut bgr, imgproc::COLOR_YUV2BGR_I420, 0)?;

        // Base64 display text
        let b64_chunk = general_purpose::STANDARD.encode(&encrypted_frame[..150.min(encrypted_frame.len())]);
	let blank = Mat::ones(HEIGHT, WIDTH, core::CV_8UC3)?.to_mat()?;
	let mut text_display = Mat::default();
	core::multiply(&blank, &core::Scalar::all(255.0), &mut text_display, 1.0, -1)?;


        let mut y = 30;
        for line in b64_chunk.as_bytes().chunks(80).take(10) {
            let line_str = std::str::from_utf8(line)?;
            imgproc::put_text(
                &mut text_display,
                line_str,
                core::Point::new(10, y),
                imgproc::FONT_HERSHEY_SIMPLEX,
                0.5,
                core::Scalar::new(0.0, 0.0, 0.0, 0.0),
                1,
                imgproc::LINE_AA,
                false,
            )?;
            y += 30;
        }

        // Show text + video
        let mut combined = Mat::default();
        let mut mats = opencv::types::VectorOfMat::new();
        mats.push(text_display);
        mats.push(bgr);
        core::hconcat(&mats, &mut combined)?;

        highgui::imshow("Encrypted (left) | Decrypted (right)", &combined)?;
        if highgui::wait_key(1)? == 'q' as i32 {
            break;
        }
    }

    Ok(())
}
